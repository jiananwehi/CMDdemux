% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CLR.R
\name{LocalCLRNorm}
\alias{LocalCLRNorm}
\title{Local CLR normalization}
\usage{
LocalCLRNorm(hash.count, pseudo_count = 1)
}
\arguments{
\item{hash.count}{The raw hashing count matrix has rows representing hashtags 
and columns representing cells.}

\item{pseudo_count}{A pseudo count is added to each entry of the matrix to 
avoid the problem of 0 in the denominator. Default value is 1.}
}
\value{
A normalized hash count matrix with rows representing hashtags and 
columns representing cells.
}
\description{
Normalize the hashing data using a local (within-cell) CLR strategy.
}
\details{
For hashtag \eqn{i} and cell \eqn{c}, the HTO counts are normalized as:
\deqn{\pi_{i,c} = \frac{HTO_{i,c} + 1}{HTO_{+,c} + N}, \quad i = 1, \dots, N}
where \eqn{HTO_{+,c} = \sum_{i} HTO_{i,c}} and \eqn{N} is the total number of hashtags.
A pseudo count of 1 is added here.

The geometric mean is calculated as:
\deqn{GM_{\pi_c} = \left( \prod_{i=1}^N \pi_{i,c} \right)^{\frac{1}{N}}}

The local CLR value is then:
\deqn{h_{i,c} = \log \left( \frac{\pi_{i,c}}{GM_{\pi_c}} \right)}
}
\examples{
\donttest{
hto.clr.mtx <- LocalCLRNorm(hto.mtx)
dim(hto.clr.mtx)
hto.clr.mtx[, 1:10]
}

}
